name: cicd-example  # 工作流名称，显示在 GitHub Actions 界面
on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发此工作流

jobs:
  build:  # 构建作业，负责编译应用程序
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境

    steps:
      - uses: actions/checkout@v4  # 检出代码到工作区

      - name: Setup Go  # 设置 Go 开发环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'  # 指定 Go 版本

      - name: Install dependencies  # 安装项目依赖
        run: go get .

      - name: Build  # 编译应用程序
        run: go build -v -o cicd ./...  # -v 显示详细构建信息，-o 指定输出文件名

      - name: Upload build artifact  # 上传构建产物供部署作业使用
        uses: actions/upload-artifact@v4
        with:
          name: cicd-build  # 构建产物的名称
          path: cicd  # 需要上传的文件路径

  deploy:  # 部署作业，负责将应用部署到服务器
    needs: build  # 依赖 build 作业，确保先完成构建
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境

    steps:
      - name: Download build artifact  # 下载构建作业的产物
        uses: actions/download-artifact@v4
        with:
          name: cicd-build  # 要下载的构建产物名称

      - name: Deploy  # 通过 SSH 部署到远程服务器
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ACCESS_TOKEN }}  # SSH 私钥，从 GitHub 仓库密钥获取
          ARGS: "-avz --delete"  # rsync 参数：归档模式、详细输出、压缩传输、删除目标目录多余文件
          SOURCE: "cicd"  # 源文件（构建产物）
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}  # 远程服务器地址
          REMOTE_USER: ${{ secrets.REMOTE_USER }}  # 远程服务器用户名
          TARGET: ${{ secrets.TARGET }}  # 远程服务器目标路径

      - name: Reload systemd manager configuration  # 重新加载 systemd 配置
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
            "sudo systemd-run --unit=cicd-reload sudo systemctl daemon-reload"
        shell: bash

      - name: Restart service  # 重启服务
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
            "sudo systemd-run --unit=cicd-restart sudo systemctl restart cicd_test"
        shell: bash

      - name: Verify service status  # 验证服务状态
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} \
            "sudo systemctl is-active --quiet cicd_test || (echo 'Service is not running'; sudo systemctl status cicd_test; exit 1)"
        shell: bash